# coding: utf-8

"""
    Connect

    Connect is the best software for distributing your tickets to where your customers already are.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: dev@showpass.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from showpass_connect.api_client import ApiClient


class EventsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def events_create(self, body, **kwargs):  # noqa: E501
        """events_create  # noqa: E501

        Create and manage Event(s). The '/expanded' action allows you to create an Event, TicketType, and TicketTypeVariants in one operation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InventoryPartnerBasedEvent body: (required)
        :return: InventoryPartnerBasedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.events_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.events_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def events_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """events_create  # noqa: E501

        Create and manage Event(s). The '/expanded' action allows you to create an Event, TicketType, and TicketTypeVariants in one operation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InventoryPartnerBasedEvent body: (required)
        :return: InventoryPartnerBasedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `events_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['header_api_key', 'query_api_key']  # noqa: E501

        return self.api_client.call_api(
            '/events', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryPartnerBasedEvent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def events_delete(self, id, **kwargs):  # noqa: E501
        """events_delete  # noqa: E501

        Create and manage Event(s). The '/expanded' action allows you to create an Event, TicketType, and TicketTypeVariants in one operation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this event. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.events_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.events_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def events_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """events_delete  # noqa: E501

        Create and manage Event(s). The '/expanded' action allows you to create an Event, TicketType, and TicketTypeVariants in one operation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this event. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `events_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['header_api_key', 'query_api_key']  # noqa: E501

        return self.api_client.call_api(
            '/events/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def events_expanded(self, body, **kwargs):  # noqa: E501
        """events_expanded  # noqa: E501

        Create and manage Event(s). The '/expanded' action allows you to create an Event, TicketType, and TicketTypeVariants in one operation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_expanded(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InventoryPartnerBasedExpandedEvent body: (required)
        :return: InventoryPartnerBasedExpandedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.events_expanded_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.events_expanded_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def events_expanded_with_http_info(self, body, **kwargs):  # noqa: E501
        """events_expanded  # noqa: E501

        Create and manage Event(s). The '/expanded' action allows you to create an Event, TicketType, and TicketTypeVariants in one operation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_expanded_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InventoryPartnerBasedExpandedEvent body: (required)
        :return: InventoryPartnerBasedExpandedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_expanded" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `events_expanded`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['header_api_key', 'query_api_key']  # noqa: E501

        return self.api_client.call_api(
            '/events/expanded', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryPartnerBasedExpandedEvent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def events_list(self, **kwargs):  # noqa: E501
        """events_list  # noqa: E501

        Create and manage Event(s). The '/expanded' action allows you to create an Event, TicketType, and TicketTypeVariants in one operation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization:
        :param str organization__in: Multiple values may be separated by commas.
        :param int page: A page number within the paginated result set.
        :return: list[InventoryPartnerBasedEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.events_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.events_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def events_list_with_http_info(self, **kwargs):  # noqa: E501
        """events_list  # noqa: E501

        Create and manage Event(s). The '/expanded' action allows you to create an Event, TicketType, and TicketTypeVariants in one operation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization:
        :param str organization__in: Multiple values may be separated by commas.
        :param int page: A page number within the paginated result set.
        :return: list[InventoryPartnerBasedEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization', 'organization__in', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organization' in params:
            query_params.append(('organization', params['organization']))  # noqa: E501
        if 'organization__in' in params:
            query_params.append(('organization__in', params['organization__in']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['header_api_key', 'query_api_key']  # noqa: E501

        return self.api_client.call_api(
            '/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InventoryPartnerBasedEvent]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def events_partial_update(self, body, id, **kwargs):  # noqa: E501
        """events_partial_update  # noqa: E501

        Create and manage Event(s). The '/expanded' action allows you to create an Event, TicketType, and TicketTypeVariants in one operation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_partial_update(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InventoryPartnerBasedUpdateEvent body: (required)
        :param str id: A UUID string identifying this event. (required)
        :return: InventoryPartnerBasedUpdateEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.events_partial_update_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.events_partial_update_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def events_partial_update_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """events_partial_update  # noqa: E501

        Create and manage Event(s). The '/expanded' action allows you to create an Event, TicketType, and TicketTypeVariants in one operation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_partial_update_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InventoryPartnerBasedUpdateEvent body: (required)
        :param str id: A UUID string identifying this event. (required)
        :return: InventoryPartnerBasedUpdateEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `events_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `events_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['header_api_key', 'query_api_key']  # noqa: E501

        return self.api_client.call_api(
            '/events/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryPartnerBasedUpdateEvent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def events_read(self, id, **kwargs):  # noqa: E501
        """events_read  # noqa: E501

        Create and manage Event(s). The '/expanded' action allows you to create an Event, TicketType, and TicketTypeVariants in one operation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this event. (required)
        :return: InventoryPartnerBasedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.events_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.events_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def events_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """events_read  # noqa: E501

        Create and manage Event(s). The '/expanded' action allows you to create an Event, TicketType, and TicketTypeVariants in one operation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this event. (required)
        :return: InventoryPartnerBasedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `events_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['header_api_key', 'query_api_key']  # noqa: E501

        return self.api_client.call_api(
            '/events/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryPartnerBasedEvent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def events_update(self, body, id, **kwargs):  # noqa: E501
        """events_update  # noqa: E501

        Create and manage Event(s). The '/expanded' action allows you to create an Event, TicketType, and TicketTypeVariants in one operation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_update(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InventoryPartnerBasedUpdateEvent body: (required)
        :param str id: A UUID string identifying this event. (required)
        :return: InventoryPartnerBasedUpdateEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.events_update_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.events_update_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def events_update_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """events_update  # noqa: E501

        Create and manage Event(s). The '/expanded' action allows you to create an Event, TicketType, and TicketTypeVariants in one operation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_update_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InventoryPartnerBasedUpdateEvent body: (required)
        :param str id: A UUID string identifying this event. (required)
        :return: InventoryPartnerBasedUpdateEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `events_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `events_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['header_api_key', 'query_api_key']  # noqa: E501

        return self.api_client.call_api(
            '/events/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryPartnerBasedUpdateEvent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
